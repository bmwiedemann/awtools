#!/usr/bin/perl
# safe 070205
use strict;
use CGI ":standard";

my $readonly=0;
#if($ENV{REMOTE_USER} eq "is") {$ENV{REMOTE_USER}="fun"; $readonly=1;} # TODO: only for beta10
use awstandard;
use awinput;
use awlogins;
use arrival;
use awhtmlout;
use awbuilding;
use DBAccess2;
awinput_init();


my $title="manage relation [\U$ENV{REMOTE_USER}\E]";
my %options;

sub planetpopsort {return planet2pop($b)<=>planet2pop($a)}

print AWheader($title);
for my $p (qw'id name alliance relation comment submit') {
	$options{$p}=param($p);
}
if(defined($options{submit}) && $options{submit}=~/delete/) { $options{delete}=1 }

if($options{comment}) {
   $options{comment} =~ s/[<>]//g;
}
if($options{alliance}) {
	$options{alliance} =~ s/[^a-zA-Z0-9._-]+//g;
}
if($options{name}) {
	$options{name} =~ s/[^a-zA-Z0-9.äöüÖÜÄß*û _:()!|{}\]\[-]+//g;
	$options{id}=playername2idm($options{name}); param("id", $options{id});
}
if($options{id}) { $options{name}=playerid2namem($options{id}); param("name",$options{name}) }


print start_form(-method=>'get', -name=>"form", -enctype=>"application/x-www-form-urlencoded"), textfield(-name=>'name', -class=>'text', -onchange=>"document.form.id.value=''"), " user name", br,
"or",br,
textfield(-name=>'id', -class=>'text', -onchange=>"document.form.name.value=''").AWfocus("form.name"), " user ID",br,
 submit(-name=>"query", -class=>'smbutton'),reset(-class=>'smbutton'),
 end_form;

if(!$readonly && defined($options{relation})) {
   my $n=lc($options{name});
	$options{comment}=~s/\r//g;
	if(!$options{delete}) {
		if($options{alliance}=~/^\s*$/) {$options{alliance}="unknown"}
		$options{alliance} =~ y/a-z/A-Z/;
#		if($options{name} !~ /^[-_. a-z0-9\[\]*!|äöüÄÖÜû{}]*$/) { print 'illegal character in user name'; exit(0);} # redundant
		$options{relation}+=0;
		if($options{relation}<0 || $options{relation}>9 || $options{alliance} !~ /^[A-Z]*$/) { print "wrong input", AWtail; exit 0;} # modperl OK
	}
	my @rel=getrelation($options{name},1);
	my $mod=$rel[4] ? "modified" : "added";
	if($options{delete}) {
		setrelation($rel[5],undef);
		$mod="deleted";
	} else {
		setrelation($rel[5],{"name"=>$n, "status"=>$options{relation}, "atag"=>$options{alliance}, "info"=>$options{comment}});
	}
	print span({-style=>'color: darkgreen'},"$mod $options{name}"),br;
}

if($options{name}) {# && $options{name} ne "unknown") {
	print hr;
	my $user=$options{name};
#	$user =~ y/A-Z/a-z/;
	my $new="edit existing entry";
	my $id=playername2idm($user);
	my $atag=playerid2tag($id);
   my $lasttag=playerid2lasttag($id);
   if($lasttag) { $lasttag=" [($lasttag)]" } else {$lasttag=""}
	my @rel=getrelation($user);
	if(!$rel[4]) {
		$options{alliance}=$atag || "unknown";
		$options{comment}="";
		#print br."debug: @rel ".br;
		$options{relation}=$atag?0:($rel[0]||4);
		$options{realrelation}=$options{relation};
		$new=span({-style=>'color: red'},"user unknown - add new entry");
	} else {
		($options{relation},$options{alliance},$options{comment},$options{realrelation})=@rel;
	}
	
	my $extralinks="";
	my $playerref;
	if($id>2) {$playerref=getplayer($id)}
   {
      if($playerref) {
		my $p=$playerref;
      my($epl,$eenergy,$ephys,$emath,$espeed,$eatt,$edef)=awinput::playerid2battlestats($id);
      $espeed=~s/\+//;

      # get own stats
      my($oatt,$odef,$omath,$ophys,$opl)=(0,0,0,0,0);
      my $awuser=getusernamecookie();
      my $oid=playername2id($awuser);
      if($oid && $oid>2) {
			my $otherplayer=getplayer($oid);
         $opl=$otherplayer->{level};
         my ($race,$sci)=awinput::playerid2ir($oid);
         if($sci && $sci->[0]) { 
            if($sci->[0]>100) {shift @$sci}
            ($omath,$ophys)=@{$sci}[3,4];
         }
         if($race && $race->[0]) { 
            ($oatt,$odef)=@{$race}[5,6];
         }
      }
        #$epl=$opl=0; # while bonus is not really working
		my $awwww=getawwwwserver();
      $extralinks=" ".
         a({-href=>"http://$awwww/about/battlecalculator/?des=0&destroyer=0&cru=0&cruiser=0&bat=0&battleship=0&sta=0&pphysics=$ephys&fphysics=$ophys&pmath=$emath&fmath=$omath&plevel=$epl&flevel=$opl&praceatt=$eatt&fraceatt=$oatt&pracedef=$edef&fracedef=$odef&submit2=calculate+battle&go=1"},img({-src=>"/images/aw/shield.png",-alt=>"defend"})).
         a({-href=>"http://$awwww/about/battlecalculator/?des=0&destroyer=0&cru=0&cruiser=0&bat=0&battleship=0&sta=0&pphysics=$ophys&fphysics=$ephys&pmath=$omath&fmath=$emath&plevel=$opl&flevel=$epl&praceatt=$oatt&fraceatt=$eatt&pracedef=$odef&fracedef=$edef&submit2=calculate+battle&go=1"},img({-src=>"/images/aw/sword.png",-alt=>"attack"}))." ".
         a({-href=>"arrival?energy=$eenergy&racespeed=$espeed"}, img({-src=>"/images/aw/shuttle.png",-alt=>"traveltime"}))." ".
              a({-href=>"http://$awwww/forums/profile.php?mode=viewprofile&u=".$id}, img({-src=>"/images/icon_profile.gif",-alt=>"forum-profile"}))." ".a({-href=>"imessage?action=send&recv=$id"}, img({-src=>"/images/aw/imessage.gif",-alt=>"IM"}))." ";
         $extralinks.=a({-href=>"playerbattles3?p=$id"},"PB")." ";
      }
   }
	$atag=$atag?" ".alliancelink($atag):"";
   my $pldurl=getallidetailurl($id);
   if($pldurl) {$extralinks=a({-href=>$pldurl},img({-src=>"/images/aw/profile3.gif", -alt=>"alliance profile"})).$extralinks;}
	print start_form(-name=>"form2"), "$new: ". span({-class=>getrelationclass($rel[0])},"$user ($id)").$atag.$lasttag." ", profilelink($id), $extralinks, 
   #a({-href=>"http://azgharde.celeonet.fr/tools/player.php?name=".$user}, "azgharde")." ".
         a({class=>"othertool", -href=>"http://www.astrowars-tools.com/info.php?pName=".$user}, "Rasta")." ".
         a({class=>"othertool", -href=>"http://filix.exx.pl/aw/profile.php?id=$id"},"filix")," ",
         a({class=>"othertool", -href=>"http://www.astrowars-tools.com/battles.php?pName=$user"},"Rastabattles")," ",
#            a({class=>"othertool", -href=>"http://azgharde.free.fr/tools/battles.php?pl=$user&da=all"},"azghardebattles"), " ",
#            a({class=>"othertool", -href=>"http://odbvpn.ath.cx:89/pub/view_battles.php?player=$user&date=all"},"battles"),
            " ",a({-href=>"playeronline?name=$user"},"view idle/online"),br;
	print hidden(-name=>'name', -value=>$user);
	print textfield(-name=>'alliance', -value=>$options{alliance}, -class=>'text'), " alliance membership (e.g. unknown, TZAR, ES)", br,
	popup_menu(-name=>'relation', -values=>[0..9], -default=>$options{realrelation},
		-labels=>\%awstandard::relationname), " relation", br,
	textarea(-name=>'comment', -value=>$options{comment}, -class=>'text', -rows=>9, -cols=>40), " who added him, why, contact, intel, etc...", br,
	 submit(-name=>"submit", -class=>"smbutton")." "
    #.a({href=>"?"},"new query")." "
	 #.submit(-name=>"submit", -value=>"delete")
    #.AWfocus("form.relation")
	;
	print end_form;
	if($id>2) {
		my @pl=playerid2planetsm($id);
		my $planets=@pl;
      my $pl=$playerref;
		my $level=$$pl{level};
		my ($pop,$scipoints)=get_one_row("SELECT `opop`,points-1*level FROM `player` WHERE `pid` = ?", [$id]);
		my @planets;
      my $poppts=0;
		foreach my $p (@pl) {
			my $pp=getplanet2($p);
			push(@planets, $pp);
         my $ppop=planet2opop($pp);
         next if $ppop<10;
			$poppts+=$ppop-10;
         next if $ppop<20;
			$poppts+=$ppop-20;
		}
      my $trades="";
      {
         my @t=awinput::playerid2trades($id);
         $trades=join(", ", map {playerid2link($_)} @t);
      }
		my $homeid=$$pl{home_id};
		my ($x,$y)=systemid2coord($homeid);
		my $bio=$$pl{science};
		my(undef,$sci)=playerid2ir($id);
		{
			if($sci && $sci->[0] && $sci->[0]>time()-3600*24*7) { $bio=$sci->[1]; }
		}
		$bio=1+($bio&0xfffe);
		my $maplink=a({href=>"tactical-live2?xs=$x&ys=$y&xe=$bio&ye=$bio"},"map");
      my $homelink=systemid2link($homeid);
		print br,"pl=$level sl=$$pl{science} cl=$$pl{culture} points=$$pl{points} (".(1*$level)."+$poppts+".($scipoints-$poppts).") trade=$$pl{trade}% logins=$$pl{logins} home=$homelink $maplink from=$$pl{from} joined=".(gmtime($$pl{joined}))." trades=$trades ";
#		require "guess.pm";
#		printf (br."race fighter%.4f ranker%.4f\n",guessrace([getpubdata($id)]));
		print br,$user," owns $planets planets<ul>";
		my $internalplanets=getbuilding_player($id);
		my %internalplanet;
		foreach my $ip (@$internalplanets) { # hash result array
			my $sidpid=shift(@$ip);
			$internalplanet{$sidpid}=$ip;
		}
		my($iptotalpp, $iptotalpop, $iiptotalpoppoints, $iptotalpoppoints);
		foreach my $pp (@planets) {
			my $sid=planet2sid($pp);
			my $pid=planet2pid($pp);
			my $sidpid=sidpid22sidpid3m($sid,$pid);
			my $ip=$internalplanet{$sidpid};
			my $ipextra="";
			if($ip) {
				my (undef,undef,undef,$ippop,$ippp,$hf,$rf,$gc,$rl,$sb,$updated_at)=@$ip;
	#			print "debug: @$ip<br/>\n";
				$ipextra=sprintf(' <span style="color:green">pop=%.2f pp=%i hf=%i rf=%i gc=%i rl=%i</span>', $ippop, $ippp, $hf, $rf, $gc, $rl);
				$iptotalpp+=$ippp;
				$iptotalpop+=$ippop;
				if($ippop>10) {
					my $iippop=int($ippop);
					$iptotalpoppoints+=$ippop-10;
					$iiptotalpoppoints+=$iippop-10;
					if($ippop>20) {
						$iptotalpoppoints+=$ippop-20;
						$iiptotalpoppoints+=$iippop-20;
					}
				}
			}
         my $s=planet2siege($pp);
			my ($x,$y)=systemid2coord($sid);
			my $link=a({-href=>"system-info?id=$sid&target=$pid"},systemid2name($sid));
			print li({-style=>"font-family: monospace;".($s?" background-color: red;":"")},sprintf(qq!(%2i,%2i) #%2i : pop=%2i%s SB=%2i $link\n!, $x, $y, $pid, planet2pop($pp), $ipextra, planet2sb($pp)));
		}
		if($iptotalpp && $iptotalpop) {
			print li(sprintf("predicted: totalpop=%.2f, points=%i+%i+%i=%i+%.2f totalpp=%i", $iptotalpop, $level, $iiptotalpoppoints, $scipoints-$poppts, $level+$iiptotalpoppoints+$scipoints-$poppts, $iptotalpoppoints-$iiptotalpoppoints, $iptotalpp));
		}
		print "</ul>\n";
      my $fleets=awinput::playerid2fleets($id, "ORDER BY `sidpid` ASC, `eta` ASC, `lastseen` ASC");
      print "fleets:<ul>\n";
      foreach my $f (@$fleets) {
         my($sidpidm,$cv, $trn, $cls)=@{$f}[3,13,8,9];
         next if (not $cv and not $trn and not $cls);
         my ($sid,$pid)=sidpid32sidpid2m($sidpidm);
         print li(sprintf("<code><a href=\"system-info?id=$sid&amp;target=$pid\">%4i#%02i</a></code> ",$sid,$pid). show_fleet($f));
      }
      print "</ul>\n";
      my $plans=playerid2plans($id);
      print "plans:<ul>\n";
      foreach my $plan (@$plans) {
         print li(showplan($plan));
      }
      print "</ul>\n";
      my($race,$sci)=playerid2ir($id);
      my ($racestr,$scistr)=ir2string($race,$sci);
		my @race=$race?@$race :();
		if(defined($race[0])) {
			print p,"race: ".br.$racestr
		}
		my @prod=@{playerid2production($id)};
      my $bonus=pop(@prod);
		if(defined($prod[0])) {
			print p,"production/sci/cul:",br;
			my $n=0;
			foreach(@prod[0..2]) {
				my $total=int($_*$$bonus[$n]*24);
            my $totalh=int($_*$$bonus[$n]);
				print "$_ * $$bonus[$n++] = $totalh/h = $total/day\n".br;
			}
         if($prod[5]) {print "AD $prod[5]".br}
         if($prod[6]) {print "PP $prod[6]".br}
		}
		if($sci && $sci->[0]) {
			print p,"science";
			my $n=0;
         my $time=shift(@$sci);
         print " from ".gmdate($time);
			print ":<br />\n",$scistr;
         
         my $etc=playerid2etc($id);
         if($etc) {
            print "ETC: ".AWtime($etc).br;
         }
		}

      if(0) {
         printf("xEnergy=%.2f ", arrival::effectiveenergy(1,2));
      }
      my @logins;
#		while($options{comment}=~/login:(\d+):(\d+):(\d+):([^ ]*)(.*)/s) {
#			$options{comment}=$5;
#        push(@logins, [$1,$2,$3,$4]);
#      }
      @logins=@{awlogins::get_logins($ENV{REMOTE_USER}, $id)};
      if($logins[0]) {
         print "<code>";
         my $firsti=awmax(-20,awmin((-$#logins-1), -1));
         foreach my $e (@logins[$firsti..-1]) { # last 8 values only
            my($login,$time,$idle, $acc)=@$e;
            my $color;
#            if($extra=~/:(\d{5,}):/) { $color="darkred";
#               if($1>60000) { $color="red" }
#            }
            my $extra="idle=$idle accuracy=$acc";
            if($color) {
               $extra=span({-style=>"color:$color"}, $extra);
            }
            printf(br."login %4i: %s GMT %s ; %s", $login, AWisodatetime($time),AWreltime($time), $extra);
         }
         print "</code>";
      }
	}
} 
print AWtail();
#foreach(keys %ENV) {  print "$_ $ENV{$_}<br>";}


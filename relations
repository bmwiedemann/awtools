#!/usr/bin/perl
use strict;
use CGI ":standard";

my $readonly=0;
#if($ENV{REMOTE_USER} eq "is") {$ENV{REMOTE_USER}="fun"; $readonly=1;} # TODO: only for beta10
my $title="manage relation [\U$ENV{REMOTE_USER}\E]";
my %options;
chdir "/home/bernhard/code/cvs/perl/awcalc";
require "input.pm";
require "cgicommon.pm";

sub planetpopsort {return planet2pop($b)<=>planet2pop($a)}

print AWheader($title);
for my $p (qw'id name alliance relation comment submit') {
	$options{$p}=param($p);
}
if(defined($options{submit}) && $options{submit}=~/delete/) { $options{delete}=1 }
if($options{id}) { $options{name}=playerid2name($options{id}); param("name",$options{name}) }
if(!$readonly && defined($options{relation})) {
	$options{name} =~ y/A-Z/a-z/;
	$options{comment}=~s/\r//g;
	if(!$options{delete}) {
		if($options{alliance}=~/^\s*$/) {$options{alliance}="unknown"}
		$options{alliance} =~ y/a-z/A-Z/;
		if($options{name} !~ /^[-_. a-z0-9\[\]*!|äöüÄÖÜû{}]*$/) { print 'illegal character in user name'; exit(0);}
		$options{relation}+=0;
		if($options{relation}<0 || $options{relation}>9 || $options{alliance} !~ /^[A-Z]*$/) { print "wrong input"; exit 0;}
	}
	my @rel=getrelation($options{name},1);
	my $mod=$rel[4] ? "modified" : "added";
	if($options{delete}) {
		setrelation($rel[5],undef);
		$mod="deleted";
	} else {
		setrelation($rel[5],{"name"=>$options{name}, "status"=>$options{relation}, "atag"=>$options{alliance}, "info"=>$options{comment}});
	}
	print span({-style=>'color: darkgreen'},"$mod $options{name}"),br;
}

if($options{name}) {
	my $user=$options{name};
	$user =~ y/A-Z/a-z/;
	my $new="edit existing entry";
	my $id=playername2id($user);
	my $atag=playerid2tag($id);
	my @rel=getrelation($user);
	if(!$rel[4]) {
		$options{alliance}=$atag || "unknown";
		$options{comment}="";
		#print br."debug: @rel ".br;
		$options{relation}=$atag?0:($rel[0]||4);
		$options{realrelation}=$options{relation};
		$new=span({-style=>'color: red'},"user unknown - add new entry");
	} else {
		($options{relation},$options{alliance},$options{comment},$options{realrelation})=@rel;
	}
	
	
	$atag=$atag?" ".a({-href=>"alliance?alliance=$atag"},"[$atag]"):"";
	print start_form, "$new: ". span({-style=>'color: '.getrelationcolor($rel[0])},"$user ($id)").$atag." ", profilelink($id), a({-href=>"http://azgharde.celeonet.fr/tools/player.php?name=".$user}, "azgharde"),br;
	print hidden(-name=>'name', $user);
	print textfield(-name=>'alliance', -value=>$options{alliance}, -class=>'text'), " alliance membership (e.g. unknown, TZAR, ES)", br,
	popup_menu(-name=>'relation', -values=>[0..9], -default=>$options{realrelation},
		-labels=>\%::relationname), " relation", br,
	textarea(-name=>'comment', -value=>$options{comment}, -class=>'text', -rows=>9, -cols=>40), " who added him, why, contact, intel, etc...", br,
	 submit("submit")." ".a({href=>"?"},"new query")." "
	 #.submit(-name=>"submit", -value=>"delete")
	;
	if($id>2) {
		my @pl=playerid2planets($id);
		my $planets=@pl;
		my $level=$::player{$id}{level};
		my $pop=0;
		my @planets;
		foreach my $p (@pl) {
			my $pp=getplanet2($p);
			$pop+=planet2opop($pp);
			push(@planets, $pp);
		}
		print br,"pl=$level sl=$::player{$id}{science} cl=$::player{$id}{culture} points=$::player{$id}{points} (".3*$level."+$pop+".($::player{$id}{points}-$pop-3*$level).") logins=$::player{$id}{logins} from=$::player{$id}{from} joined=".(gmtime($::player{$id}{joined}))." ";
#		require "guess.pm";
#		printf (br."race fighter%.4f ranker%.4f\n",guessrace([getpubdata($id)]));
		print br,$user," owns $planets planets<ul>";
		foreach my $pp (sort planetpopsort @planets) {
			my $sid=planet2sid($pp);
			my ($x,$y)=systemid2coord($sid);
			print qq! <li><a href="system-info?id=$sid">!.systemid2name($sid);
			printf qq!</a> ($x,$y) #%i : pop=%i SB=%i </li>\n!, planet2pid($pp), planet2pop($pp), planet2sb($pp);
		}
		print "</ul>\n";
		my @race=relation2race($options{comment});
		if(defined($race[0])) {
			print p,"race:",br;
			my $n=0;
			foreach(@race) {
				my $bonus=$::racebonus[$n]*100*$_;
				if($bonus>=0) {$bonus="+".$bonus}
				print "$bonus% $::racestr[$n++] ($_)<br />\n";
			}
		}
		my @prod=relation2production($options{comment});
		if(defined($prod[0])) {
			print p,"production:",br;
			my $n=0;
			foreach(@prod[0..2]) {
				my $total=int($_*$prod[5+$n]*24);
				print "$_ * $prod[5+$n++] = $total/day<br />\n";
			}
		}
		my @sci=relation2science($options{comment});
		if(defined($sci[0])) {
			print p,"science";
			my $n=0;
			if($sci[0]>100) {
				my $time=shift(@sci);
				print " from ".gmdate($time);
			}
			print ":<br />\n";
			foreach(@sci) {
				print "$::sciencestr[$n++] $_<br />\n";
			}
		}
		while($options{comment}=~/login:(\d+):(\d+)(.*)/s) {
			$options{comment}=$3;
			print br,"login $1: ", scalar gmtime($2), " GMT";
		}
	}
} else {
	print start_form('get'), textfield(-name=>'name', -class=>'text'), " user name", br,
	 submit(-name=>"query", -class=>'smbutton')
}
print end_form, AWtail();
#foreach(keys %ENV) {  print "$_ $ENV{$_}<br>";}


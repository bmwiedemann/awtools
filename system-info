#!/usr/bin/perl

use strict;
use CGI ":standard";
use Digest::MD5 "md5_hex";

my %options;
chdir "/home/bernhard/code/cvs/perl/awcalc";
require "standard.pm";
my $awuser=cookie('user');
my $refsys=cookie('refsys');

sub spinfo($) { my($id)=@_; # short player info string
	if($id==2) {return "unknown"}
	if($id==0) {return "free planet"}
	my $name=$::player{$id}{name};
	my $aid=$::player{$id}{alliance};
	my @rel=getrelation($name);
	my $color=getrelationcolor($rel[0]);
	my $alliancestr="";
	if(!$rel[1] && $aid>0) { $rel[1]=$::alliances{$aid}{tag} }
	if($rel[1]) { $alliancestr="[".$rel[1]."]"; }
	my $rellink=qq! <a href="relations?name=$name"><img src="/images/aw/relations-colored.gif" title="player info"></a> !;
	if($options{export}) {
		return "[color=$color]$alliancestr $name [/color]";
	}
	return profilelink($id).$rellink.
		span({-style=>'color: '.$color}, qq!$alliancestr $name ($id) !);
}
sub mkhash($) { my($tag)=@_;
	if($options{uniq} && $options{uniq}!~/\./) {$options{uniq}=".$options{uniq}."} else {$options{uniq}=""}
	my $token="$tag$options{uniq}$options{expires}#$options{id}#secret9";
	return md5_hex($token);
}
sub auth_ok($) { my($auth)=@_;
	my @auth=split("#",$auth);
	if(mkhash($auth[0]) ne $auth[1]) {return 0}
	if($options{expires} && $options{expires}<time) {
		print "valid link has expired\n";
		return 0;
	}
	$ENV{REMOTE_USER}=$auth[0];
	return 1;
}
sub tprint { unless($options{export}){print @_} }

my $path="/home/bernhard/code/cvs/perl/awcalc";
chdir $path;
for my $p (qw'x y') {
  $options{$p}=param($p);
}
if(defined($options{x}) && defined($options{y})) {
	require "awmap.pm";
	my($x,$y)=imgtomap($options{x}, $options{y});
	print redirect("http://$ENV{HTTP_HOST}$ENV{SCRIPT_NAME}?mapx=$x&mapy=$y");
	exit(0);
}
print header;

if(param("legend")) {
	print AWheader2('legend of AW relations');
	for my $n (1..9) {
		my $color=getrelationcolor($n);
		print span({-style=>'color: '.$color}, br."$n $color = $::relationname{$n}\n");
	}
	print end_html;
	exit 0;
}

if(param()) {
	my($x,$y,$system);
	for my $p (qw'x y mapx mapy id name export auth expires uniq') {
	  $options{$p}=param($p);
	}
	if($options{export}==2) {
		my $u=$ENV{REMOTE_USER};
		if(!$options{expires}) {$options{expires}=""}
		else {$options{expires}=time+$options{expires}*3600*24;}
		my $l="http://guest:guest\@aw.lsmod.de/cgi-bin/public/system-info?id=$options{id}&expires=$options{expires}&uniq=$options{uniq}&auth=$u%23".mkhash($u);
		print start_html("export for system $options{id}").
		qq!This is an anonymous read-only access URL. It is valid for whole beta - give only to trusted friends.<br> <a href="$l">copy this link</a> or try $l <br>note: for IE leave out the guest:guest\@!,p,
		"set expiry time: ", start_form('get'),
		hidden('id', $options{id}),
		hidden('export', $options{export}),
		textfield('expires', "7"), " days valid from now",br,
		textfield('uniq',12345), " unique id",br,
		submit;
		exit 0;
	}
	if($ENV{REMOTE_USER} eq "guest" && !auth_ok($options{auth})) {
	#	print "incorrect auth\n";
	}
	require "input.pm";
	require "awmap.pm";
	if(defined($options{mapx})) { ($x,$y)=($options{mapx}, $options{mapy}) }
	elsif(defined($options{x})) { ($x,$y)=imgtomap($options{x}, $options{y}) }
	if(defined($x)) { $system=systemcoord2id($x,$y) }
	if(!$system && $options{name}) { $system=systemname2id($options{name}) }
	if(!$system && $options{id}) { $system=$options{id} }
	if(!$system) {
		print AWheader2('system not found');
		print "no system $options{name} at $x,$y";
	} else {
		($x,$y)=($::starmap{$system}{x},$::starmap{$system}{y});
		print AWheader2("($x,$y) $::starmap{$system}{name} system info [\U$ENV{REMOTE_USER}\E]");
		my ($bs,$be,$eol)=('[b]','[/b]',"\n");

		## start of normal output ##
		if(!$options{export}) {
			print qq!<a href="?legend=1">legend</a> <a href="?">new query</a> <a href="?id=$system&export=1">BB-export</a> <a href="?id=$system&export=2">anonymous updated export</a>!,br;
			($bs,$be,$eol)=('<b>','</b>',"<br>\n");
		}
		my $output="$bs$::starmap{$system}{name}($x,$y)$be${eol}Id=$system level=$::starmap{$system}{level} ";
		if(!$options{export}) {
			my @systeminfo=getplanetinfo($system,0);
			my $sysinfo=$systeminfo[2]||"";
			tprint $output, $eol, qq! <a href="tactical-large?xs=$x&ys=$y&xe=29&ye=19">tactical</a> <a href="http://$::server/about/starmap.php?dx=$x&dy=$y">starmap</a> <a href="http://$::server/0/Map/Detail.php/?nr=$system">map/details</a>!,br,$sysinfo,
			"planets here: <ul>";
		} else {
			$output.="[url=http://$::server/about/starmap.php?dx=$x&dy=$y]starmap[/url] [url=http://$::server/0/Map/Detail.php/?nr=$system]Map/Details[/url] [url=http://$::bmwserver/cgi-bin/system-info?id=$system]AWtool-link[/url]$eol";
		}
		my ($refdist,$refp,$refid,$refe,$refs);
		if($refsys) {
			($refid,$refp)=split("#",$refsys);
			my($refx,$refy)=systemid2coord($refid);
			if(defined($refx)) {
				$refdist=($refx-$x)**2+($refy-$y)**2;
				my @rel=getrelation($awuser);
				my @race;
				my @sci;
				if((@race=relation2race($rel[2]))) {$refs=$race[4]}
				if((@sci=relation2science($rel[2]))) {if($sci[0]>99){shift(@sci)};$refe=$sci[2]}
			}
		}
		my $planets=$::planets{$system};
		foreach my $h (@$planets) {
			tprint li;
			next if(!$h);
#			foreach my $item (sort keys %$h) { print " $item=$$h{$item}\n"; }
			my $id="$system#$$h{planetid}";
			my $pinfo;
			my @pinfo=getplanetinfo($system,$$h{planetid});
			$id=~s/#/%23/;
			my $info="";
			if(@pinfo) {
				my $status=$pinfo[0];
				my $name=playerid2name($pinfo[1]);
				$pinfo=$pinfo[2];
				my @rel=getrelation($name);
				my $scolor=getstatuscolor($status);
				my $rcolor=getrelationcolor($rel[0]);
				my $atag=getatag($rel[1]);
				if($options{export}) {
					$info=qq![color=$scolor]$::planetstatusstring{$status} [/color] [color=$rcolor]$atag $name [/color]: $pinfo!;
				} else {
					$info=" ".span({-style=>"color: $scolor"},$::planetstatusstring{$status})." ".span({-style=>"color: $rcolor"},$atag." ".$name).": ".$pinfo;
				}
			}
			my $plink=qq! <a href="planet-info?id=$id"><img src="/images/aw/edit-planet.gif" title="edit planet-info"></a> !;
			my $siegedcol="";
			if(planet2siege($h)) { $siegedcol=qq!style="background-color: red"!; }
			if(!$options{export}) {
				my $pdiff=abs($refp-$$h{planetid});
				my $etalink;
				if(defined($refdist)) {$etalink=qq! <a href="arrival?distance=$refdist&planet=$pdiff&energy=$refe&racespeed=$refs">ETA</a> !;}
				printf "<span $siegedcol><code>#%2i pop=%2i SB=%2i</code></span> %s%s%s%s", $$h{planetid}, planet2pop($h), planet2sb($h), $plink, $etalink, spinfo($$h{ownerid}), $info;
			} else {
				$output.=sprintf("$eol#%2i pop=%2i SB=%2i %s %s", $$h{planetid}, planet2pop($h), planet2sb($h), spinfo($$h{ownerid}), $info);
			}
			
		}
		if(!$options{export}) {
			print "</ul>\n";
			print "players having their origin here: <ul>";
			foreach(@{$::starmap{$system}{origin}}) { print li,spinfo($_); }
			print "</ul>\n";
			my $uid=playername2id($awuser);
			if($uid>2) {
				my $home=playerid2home($uid);
				my ($hx,$hy)=systemid2coord($home);
				my ($dx,$dy)=(abs($hx-$x),abs($hy-$y));
				my $sqr=$dx**2+$dy**2;
				my $bio=($dx>$dy?$dx:$dy)*2;
				print "$awuser($uid): ($hx,$hy)-&gt($x,$y) = ($dx,$dy)  Bio=$bio distsqr=$sqr";
			}
		} else {
			print qq!<textarea cols=80 rows=15 name="dummy">$output</textarea>!;
		}
	}
} else { 
  print AWheader2("AW system info");
  print start_form('get'),
   textfield('mapx'), " x", br,
   textfield('mapy'), " y (e.g. x=0 y=0 for Rana)", br,
   "or",br,
   textfield('id'), " system id", br,
   "or",br,
   textfield('name'), " system name", br,
   submit, end_form;
}
print end_html;


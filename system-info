#!/usr/bin/perl

use strict;
use CGI ":standard";
use Digest::MD5 "md5_hex";

BEGIN {chdir "/home/aw/inc";}
use awstandard;
use awinput;
use DBAccess;
#use awmap;
awstandard_init();

our %options;
our $awuser=cookie('user');
my $refsys=cookie('refsys');

my $wantcurrent=" AND `iscurrent` = 1 ";

sub tlink(@) { my($a)=@_;
   if($options{export}) {
      return "[url=".$$a[0]."]".$$a[1]."[/url]";
   } else {
      return a({-href=>$$a[0]},$$a[1]);
   }
}

sub spinfo($) { my($id)=@_; # short player info string
	if($id==2) {return "unknown"}
	if($id==0) {return "free planet"}
	my $name=$player{$id}{name};
	my $aid=$player{$id}{alliance};
	my @rel=getrelation($name);
	my $color=getrelationcolor($rel[0]);
	my $alliancestr="";
	if(!$rel[1] && $aid>0) { $rel[1]=allianceid2tag($aid); }
	if($rel[1]) { $alliancestr="[".$rel[1]."]"; }
	my $rellink=qq! <a href="relations?name=$name"><img src="/images/aw/relations-colored.gif" alt="relations" title="player info" /></a> !;
	if($options{export}) {
		return "[color=$color]$alliancestr $name [/color]";
	}
	return profilelink($id).$rellink.
		span({-style=>'color: '.$color}, qq!$alliancestr $name ($id) !);
}
sub mkhash($) { my($tag)=@_;
	if($options{uniq} && $options{uniq}!~/\./) {$options{uniq}=".$options{uniq}."} else {$options{uniq}=""}
   my $secret=awstandard::file_content("systemexportsecret");
	my $token="$tag$options{uniq}$options{expires}#$options{id}#$secret";
#   print " md5($token) ";
	return md5_hex($token);
}
sub auth_ok($) { my($auth)=@_;
   return if(!$auth);
	my @auth=split("#",$auth);
	if(mkhash($auth[0]) ne $auth[1]) {return 0}
	if($options{expires} && $options{expires}<time) {
		print "valid link has expired\n";
		return 0;
	}
	$ENV{REMOTE_USER}=$auth[0];
	return 1;
}
sub tprint { unless($options{export}){print @_} }

for my $p (qw(refpid id)) {
  $options{$p}=param($p);
}
my $cookies=[];
if(defined($options{refpid}) && defined($options{id})) {
   my $ref="$options{id}#$options{refpid}";
   push(@$cookies, cookie(-name=>'refsys', -value=>$ref, -expires=>'+90d'));
}
#if(defined($options{x}) && defined($options{y})) {
#	my($x,$y)=awmap::imgtomap($options{x}, $options{y});
#	print redirect("http://$ENV{HTTP_HOST}$ENV{SCRIPT_NAME}?mapx=$x&mapy=$y");
#	exit(0);
#}
print header(-cookie=>$cookies);

if(param("legend")) {
	print AWheader2('legend of AW relations');
	for my $n (1..9) {
		my $color=getrelationcolor($n);
		print span({-style=>'color: '.$color}, br."$n $color = $relationname{$n}\n");
	}
	print end_html;
	exit 0;
}

if(param()) {
	my($x,$y,$system);
	for my $p (qw'x y mapx mapy id name export auth expires uniq history simple') {
	  $options{$p}=param($p);
	}
   if($options{history}) {$wantcurrent=""}
   $options{name}=~s/\s+$//;
   $options{name}=~s/^\s+//;
	if($options{export}==2) {
		my $u=$ENV{REMOTE_USER};
		my $expiryinfo="the whole round";
		if(!$options{expires}) {$options{expires}=""}
		else {$expiryinfo="$options{expires} days";$options{expires}=time+$options{expires}*3600*24;}
		my $l="http://aw.lsmod.de/cgi-bin/system-info?id=$options{id}&amp;expires=$options{expires}&amp;uniq=$options{uniq}&amp;auth=$u%23".mkhash($u);
		print AWheader2("export for system $options{id}").
		qq!This is an anonymous read-only access URL. It is valid for $expiryinfo - give only to trusted friends.<br /> <a href="$l">copy this link</a> or try $l <br />note: user=guest pass=guest!,p,
		"set expiry time: ", start_form('get'),
		hidden('id', $options{id}),
		hidden('export', $options{export}),
		textfield(-name=>'expires', -value=>"7", -class=>'text'), " days valid from now",br,
		textfield(-name=>'uniq', -value=>"12345", -class=>'text'), " unique id",br,
		submit(-class=>'smbutton');
		exit 0;
	}
	if(!auth_ok($options{auth})) {
#		print "incorrect auth\n";
	}
   awinput_init(1);
	if(defined($options{mapx})) { ($x,$y)=($options{mapx}, $options{mapy}) }
#	elsif(defined($options{x})) { ($x,$y)=awmap::imgtomap($options{x}, $options{y}) }
	if(defined($x)) { $system=systemcoord2id($x,$y) }
	if(!$system && $options{name}) { $system=systemname2id($options{name}) }
	if(!$system && $options{id}) { $system=$options{id} }
	if(!$system) {
		print AWheader2('system not found');
		print "no system $options{name} at $x,$y".br,
		 a({-href=>"$ENV{HTTP_REFERER}"},"go back");
	} else {
      if($ENV{HTTP_REFERER}) {
         awinput::dbplanetaddinit(1);
#         if($ENV{HTTP_REFERER}=~m/xtasisrebellion/){
#         open(DEBUG, "> /tmp/debug"); print DEBUG "$system, $ENV{HTTP_REFERER}";}
         dblinkadd($system, $ENV{HTTP_REFERER});
         dbfleetaddfinish();
      }
		($x,$y)=systemid2coord($system);
		my $sysname=systemid2name($system);
      my $headline="($x,$y) $sysname system info [\U$ENV{REMOTE_USER}\E]";
      if($options{simple}) {print AWheader2("").b($headline).br}
      else {print AWheader2($headline);}
		my ($bs,$be,$eol)=('[b]','[/b]',"\n");

      my $sidpid1=sidpid22sidpid3m($system,1);
      my $sth=$dbh->prepare("SELECT * from `cdcv` WHERE `sidpid` >= ? AND `sidpid` <= ?");
      my $aref=$dbh->selectall_arrayref($sth, {}, $sidpid1, $sidpid1+11);
      my %planetcdcv;
      foreach my $row (@$aref) {
         my($sidpid,$time,$cv)=@$row;
         my $pid=awinput::sidpid2pidm($sidpid);
#         print "$pid $cv ".scalar localtime($time);
         $planetcdcv{$pid}=$cv;
      }
         
		## start of normal output ##
		if(!$options{export}) {
			print qq!<a href="system-info?legend=1">legend</a> <a href="system-info?id=$system&amp;export=1">BB-export</a> <a href="system-info?id=$system&amp;export=2">anonymous updated export</a> !.a({-href=>"system-info?id=$system&history=".(!$options{history})},"toggle history")." ".a({-href=>"system-info?id=$system&simple=".(!$options{simple})},"toggle simple"),br;
			($bs,$be,$eol)=('<b>','</b>',"<br />\n");
		}
		my $syslevel=systemid2level($system);
		my $output="$bs$sysname($x,$y)$be${eol}Id=$system level=$syslevel ";
      my @nstarmaplink=("http://neron92.free.fr/AW_Tools/showmap.php?id=$system&range=25&showcoord=1&showid=1&s_infos=1&f_infos=1","neronstarmap");
      my @lstarmaplink=("http://lefois.de/aw/tool/map.php?R_pid=&R_sysid=$system&lb=1&coord=1&details=1","lefoisstarmap");
      my @lbattleslink=("http://www.lefois.de/aw/tool/battles.php?&days=all&sysid=$system", "lefoisbattles");
      my @lhistorylink=("http://www.lefois.de/aw/tool/systemhistory.php?R_sysid=$system", "lefoishistory");
      my @mapdetailslink=("http://$server/0/Map/Detail.php/?nr=$system","Map/Details");
      if(!$options{export}) {
			my @systeminfo=getplanetinfo($system,0);
			my $sysinfo=$systeminfo[2]||"";
         if($sysinfo) {
            $sysinfo=~s!^<br />!!;
            $sysinfo=p.a({-href=>"planet-info?id=$system%230"},img({-src=>"/images/system.png",-alt=>"edit sys"}))." ".$sysinfo.p;
         }
			tprint $output, $eol, a({-href=>"tactical-large?xs=$x&ys=$y&xe=29&ye=19&fast=1"},"tactical")." ".tlink(\@nstarmaplink)." ".tlink(\@lstarmaplink)." ".tlink(\@lbattleslink)." ".tlink(\@lhistorylink)." ".tlink(\@mapdetailslink)." ".a({-href=>"whocansee?sid=$system"},"WhoCanSee"),br,$sysinfo,
			"planets here: <a name=\"planets\" /><ul>";
		} else {
			$output.=tlink(\@nstarmaplink)." ".tlink(\@lstarmaplink)." ".tlink(\@mapdetailslink)." [url=http://$bmwserver/cgi-bin/system-info?id=$system]AWtool-link[/url]$eol";
		}
		my @planets=systemid2planets($system);
		foreach my $h (@planets) {
			tprint "<li>";
			next if(!$h);
#			foreach my $item (sort keys %$h) { print " $item=$$h{$item}\n"; }
			my $planetid=planet2pid($h);
			my $id="$system%23$planetid";
			my $pinfo;
			my @pinfo=getplanetinfo($system,$planetid);
			my $info="";
			if(@pinfo) {
				my $status=$pinfo[0];
				my $name=playerid2name($pinfo[1]);
				$pinfo=$pinfo[2];
				my @rel=getrelation($name);
				my $scolor=getstatuscolor($status);
				my $rcolor=getrelationcolor($rel[0]);
				my $atag=getatag($rel[1]);
				if($options{export}) {
               $pinfo=~s!$magicstring([^:]*)!$magicstring."[color=".getrelationcolor((getrelation($1))[0])."]".$1."[/color]"!geo;
					$info=qq![color=$scolor]$planetstatusstring{$status} [/color] [color=$rcolor]$atag $name [/color]: $pinfo!;
				} else {
               $pinfo=~s!\n!<br />!g;
               $pinfo=~s/$magicstring([^:]*)/$magicstring.span({-style=>
                     "color: ".getrelationcolor((getrelation($1))[0])},$1)/geo;
					$info=" ".span({-style=>"color: $scolor"},$planetstatusstring{$status})." ".playerid2link($pinfo[1]).": ".$pinfo;
				}
			}
         my $fleets = awinput::get_fleets(sidpid22sidpid3m($system,$planetid), $wantcurrent);
         my $fleetsstr="";
         foreach my $f (@$fleets) {
            $fleetsstr.=$eol.awinput::show_fleet($f);
         }
         if(defined(my $plcdcv=$planetcdcv{$planetid})) {
            $fleetsstr.=$eol.$plcdcv." CV defending (from countdown info)";
         }
         my $img;
         if($options{simple}) {$img="edit"}
         else {$img='<img src="/images/aw/edit-planet.gif" title="edit planet-info" alt="planet info"/>'}
			my $plink=qq! <a href="planet-info?id=$id">$img</a> !;
			my $siegedcol="";
			if(planet2siege($h)) { $siegedcol=qq!style="background-color: red"!; }
			if(!$options{export}) {
				my $etalink=" ".a({-href=>"?id=$system&refpid=$planetid"},img({-src=>"/images/shuttle.png",-alt=>"set ref", -title=>"set ETA source"}));
				if(defined($refsys)) {$etalink.=qq!<a href="eta?sid=$system&amp;pid=$planetid"><img src="/images/shuttle-dn.png" alt="ETA" title="calculate ETA" /></a> !;}
            if($options{simple}) {$etalink=""}
				printf "<span $siegedcol><code>#%2i pop=%2i SB=%2i</code></span> %s%s %s%s", $planetid, planet2pop($h), planet2sb($h), $plink, $etalink, playerid2link($$h{ownerid}), $info.$fleetsstr."</li>\n";
			} else {
				$output.=sprintf("$eol#%2i pop=%2i SB=%2i %s %s%s", $planetid, planet2pop($h), planet2sb($h), spinfo($$h{ownerid}), (planet2siege($h)?"[color=red]sieged[/color] ":""), $info);
			}
			
		}
		if(!$options{export}) {
			print "</ul>\n";
#			if(@{$::starmap{$system}{origin}}) {
#				print "players having their origin here: <ul>";
#				foreach(@{$::starmap{$system}{origin}}) { print li(spinfo($_)); }
#				print "</ul>\n";
#			}
			my $uid=playername2id($awuser);
			if($uid>2) {
				my $home=playerid2home($uid);
				my ($hx,$hy)=systemid2coord($home);
				my ($dx,$dy)=(abs($hx-$x),abs($hy-$y));
				my $sqr=$dx**2+$dy**2;
				my $bio=($dx>$dy?$dx:$dy)*2;
				print "$awuser($uid): ($hx,$hy)-&gt;($x,$y) = ($dx,$dy)  Bio=$bio distsqr=$sqr";
			}
		} else {
         my $who=getauthname() || $ENV{REMOTE_USER};
         $output.=$eol."[color=blue]exported by $who at ".AWisodatetime(time())."[/color]";
			#print qq!<textarea cols=80 rows=15 name="dummy" class="text">$output</textarea>!;
			print textarea(-cols=>80, -rows=>15, -class=>'text', -value=>$output.$eol);
		}
	}
} else { 
  print AWheader2("AW system info");
  print start_form(-method=>'get', -name=>"form"),
   textfield(-name=>'mapx', -class=>'text').AWfocus("form.mapx"), " x", br,
   textfield(-name=>'mapy', -class=>'text'), " y (e.g. x=0 y=0 for Rana)", br,
   "or",br,
   textfield(-name=>'id', -class=>'text'), " system id", br,
   "or",br,
   textfield(-name=>'name', -class=>'text'), " system name", br,
   submit(-class=>'smbutton'), end_form;
}
print br.b("notice: fleets now show two CV values with the second one being xCV = effective CV = CV*attbonus*physbonus").
AWtail;

